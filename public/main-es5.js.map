{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/cases-add/cases-add.component.ts","webpack:///src/app/components/cases-add/cases-add.component.html","webpack:///src/app/components/cases-details/cases-details.component.ts","webpack:///src/app/components/cases-details/cases-details.component.html","webpack:///src/app/components/cases-edit/cases-edit.component.ts","webpack:///src/app/components/cases-edit/cases-edit.component.html","webpack:///src/app/components/cases/cases.component.ts","webpack:///src/app/components/cases/cases.component.html","webpack:///src/app/components/dashboard/dashboard.component.ts","webpack:///src/app/components/dashboard/dashboard.component.html","webpack:///src/app/components/login/login.component.ts","webpack:///src/app/components/login/login.component.html","webpack:///src/app/components/navbar/navbar.component.ts","webpack:///src/app/components/navbar/navbar.component.html","webpack:///src/app/components/profile/profile.component.ts","webpack:///src/app/components/profile/profile.component.html","webpack:///src/app/components/register/register.component.ts","webpack:///src/app/components/register/register.component.html","webpack:///src/app/guards/auth.guard.ts","webpack:///src/app/services/auth.service.ts","webpack:///src/app/services/case-api.service.ts","webpack:///src/app/services/validate.service.ts","webpack:///src/app/shared/material.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","canActivate","data","title","AppRoutingModule","forRoot","imports","AppComponent","selector","templateUrl","styleUrls","AppModule","config","tokenGetter","localStorage","getItem","declarations","providers","bootstrap","MyErrorStateMatcher","control","form","isSubmitted","submitted","invalid","dirty","touched","CasesAddComponent","router","api","formBuilder","age","genderList","countryList","statusList","isLoadingResults","matcher","casesForm","group","first_name","required","last_name","gender","email","country","status","addCase","value","subscribe","res","_id","navigate","err","console","log","onFormSubmit","CasesDetailsComponent","route","cases","updated","getCasesDetails","snapshot","params","getCase","deleteCase","deleteCases","CasesEditComponent","getCaseById","setValue","updateCase","casesDetails","CasesComponent","httpClient","displayedColumns","getCases","row","DashboardComponent","breakpointObserver","cards","observe","Handset","pipe","matches","cols","rows","LoginComponent","fb","flashMessageService","matSnackBar","authService","hide","addressForm","username","password","user","authenticateUser","success","storeUserData","token","open","duration","onLoginSubmit","NavbarComponent","isHandset$","result","getProfile","profile","logout","ProfileComponent","RegisterComponent","name","registerUser","onRegisterSubmit","AuthGuard","loggedIn","AuthService","http","jwtHelper","httpOptions","headers","post","loadToken","authToken","get","setItem","JSON","stringify","undefined","isTokenExpired","clear","providedIn","apiUrl","CaseApiService","operation","error","handleError","url","put","ValidateService","re","test","String","toLowerCase","MaterialModule","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AuthGuard } from './guards/auth.guard';\n\nimport { RegisterComponent } from './components/register/register.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { ProfileComponent } from './components/profile/profile.component';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { CasesComponent } from './components/cases/cases.component';\nimport { CasesAddComponent } from './components/cases-add/cases-add.component';\nimport { CasesEditComponent } from './components/cases-edit/cases-edit.component';\nimport { CasesDetailsComponent } from './components/cases-details/cases-details.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginComponent\n  },\n  {\n    path: 'register',\n    component: RegisterComponent\n  },\n  {\n    path: 'login',\n    component: LoginComponent\n  },\n  {\n    path: 'profile',\n    component: ProfileComponent,\n    canActivate: [AuthGuard]\n  },\n  {\n    path: 'dashboard',\n    component: DashboardComponent,\n    canActivate: [AuthGuard]\n  },\n  {\n    path: 'cases',\n    component: CasesComponent,\n    canActivate: [AuthGuard]\n  },\n  {\n    path: 'cases-add',\n    component: CasesAddComponent,\n    canActivate: [AuthGuard]\n  },\n  {\n    path: 'cases-edit/:id',\n    component: CasesEditComponent,\n    canActivate: [AuthGuard]\n  },\n  {\n    path: 'cases-details/:id',\n    component: CasesDetailsComponent,\n    data: { title: 'Case Details' },\n    canActivate: [AuthGuard]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'client';\n}\n","<app-navbar></app-navbar>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MaterialModule } from './shared/material.module';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ProfileComponent } from './components/profile/profile.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { ValidateService } from './services/validate.service';\nimport { FlashMessagesModule } from 'angular2-flash-messages';\nimport { HttpClientModule } from '@angular/common/http';\nimport { JwtModule } from \"@auth0/angular-jwt\";\nimport { AuthService } from './services/auth.service';\nimport { AuthGuard } from './guards/auth.guard';\n\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { CasesComponent } from './components/cases/cases.component';\nimport { CasesAddComponent } from './components/cases-add/cases-add.component';\nimport { CasesDetailsComponent } from './components/cases-details/cases-details.component';\nimport { CasesEditComponent } from './components/cases-edit/cases-edit.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    LoginComponent,\n    ProfileComponent,\n    RegisterComponent,\n    DashboardComponent,\n    CasesComponent,\n    CasesAddComponent,\n    CasesDetailsComponent,\n    CasesEditComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    LayoutModule,\n    FlexLayoutModule,\n    ReactiveFormsModule,\n    FlashMessagesModule.forRoot(),\n    HttpClientModule,\n    JwtModule.forRoot({\n      config: {\n        tokenGetter: () => {\n          return localStorage.getItem('id_token')\n        }\n      }\n    })\n  ],\n  providers: [ValidateService, AuthService, AuthGuard],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CaseApiService } from '../../services/case-api.service';\nimport { FormControl, FormGroupDirective, FormBuilder, FormGroup, NgForm, Validators } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\n\n/** Error when invalid control is dirty, touched, or submitted */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n\n@Component({\n  selector: 'app-cases-add',\n  templateUrl: './cases-add.component.html',\n  styleUrls: ['./cases-add.component.scss']\n})\nexport class CasesAddComponent implements OnInit {\n\n  casesForm: FormGroup;\n  first_name: '';\n  last_name: '';\n  age: number = null;\n  gender: '';\n  genderList = ['Male', 'Female'];\n  countryList = [\n    'Afghanistan',\n    'Albania',\n    'Algeria',\n    'Aland Islands',\n    'American Samoa',\n    'Anguilla',\n    'Andorra',\n    'Angola',\n    'Antilles - Netherlands ',\n    'Antigua and Barbuda',\n    'Antarctica',\n    'Argentina',\n    'Armenia',\n    'Australia',\n    'Austria',\n    'Aruba',\n    'Azerbaijan',\n    'Bosnia and Herzegovina',\n    'Barbados',\n    'Bangladesh',\n    'Belgium',\n    'Burkina Faso',\n    'Bulgaria',\n    'Bahrain',\n    'Burundi',\n    'Benin',\n    'Bermuda',\n    'Brunei Darussalam',\n    'Bolivia',\n    'Brazil',\n    'Bahamas',\n    'Bhutan',\n    'Bouvet Island',\n    'Botswana',\n    'Belarus',\n    'Belize',\n    'Cambodia',\n    'Cameroon',\n    'Canada',\n    'Cape Verde',\n    'Central African Republic',\n    'Chad',\n    'Chile',\n    'China',\n    'Christmas Island',\n    'Cocos (Keeling) Islands',\n    'Colombia',\n    'Congo',\n    'Cote D\\'Ivoire (Ivory Coast)',\n    'Cook Islands',\n    'Costa Rica',\n    'Croatia (Hrvatska)',\n    'Cuba',\n    'Cyprus',\n    'Czech Republic',\n    'Democratic Republic of the Congo',\n    'Djibouti',\n    'Denmark',\n    'Dominica',\n    'Dominican Republic',\n    'Ecuador',\n    'Egypt',\n    'El Salvador',\n    'East Timor',\n    'Estonia',\n    'Equatorial Guinea',\n    'Eritrea',\n    'Ethiopia',\n    'Finland',\n    'Fiji',\n    'Falkland Islands (Malvinas)',\n    'Federated States of Micronesia',\n    'Faroe Islands',\n    'France',\n    'France, Metropolitan',\n    'French Guiana',\n    'French Polynesia',\n    'Gabon',\n    'Gambia',\n    'Germany',\n    'Ghana',\n    'Gibraltar',\n    'Great Britain (UK)',\n    'Grenada',\n    'Georgia',\n    'Greece',\n    'Greenland',\n    'Guinea',\n    'Guadeloupe',\n    'S. Georgia and S. Sandwich Islands',\n    'Guatemala',\n    'Guam',\n    'Guinea-Bissau',\n    'Guyana',\n    'Hong Kong',\n    'Heard Island and McDonald Islands',\n    'Honduras',\n    'Haiti',\n    'Hungary',\n    'Indonesia',\n    'Ireland',\n    'Israel',\n    'India',\n    'British Indian Ocean Territory',\n    'Iraq',\n    'Iran',\n    'Italy',\n    'Jamaica',\n    'Jordan',\n    'Japan',\n    'Kenya',\n    'Kyrgyzstan',\n    'Kiribati',\n    'Comoros',\n    'Saint Kitts and Nevis',\n    'Korea (North)',\n    'Korea (South)',\n    'Kuwait',\n    'Cayman Islands',\n    'Kazakhstan',\n    'Laos',\n    'Lebanon',\n    'Saint Lucia',\n    'Liechtenstein',\n    'Sri Lanka',\n    'Liberia',\n    'Lesotho',\n    'Lithuania',\n    'Luxembourg',\n    'Latvia',\n    'Libya',\n    'Macedonia',\n    'Macao',\n    'Madagascar',\n    'Malaysia',\n    'Mali',\n    'Malawi',\n    'Mauritania',\n    'Marshall Islands',\n    'Martinique',\n    'Mauritius',\n    'Mayotte',\n    'Malta',\n    'Mexico',\n    'Morocco',\n    'Monaco',\n    'Moldova',\n    'Mongolia',\n    'Myanmar',\n    'Northern Mariana Islands',\n    'Montserrat',\n    'Maldives',\n    'Mozambique',\n    'Namibia',\n    'New Caledonia',\n    'Niger',\n    'Norfolk Island',\n    'Nigeria',\n    'Nicaragua',\n    'Netherlands',\n    'Norway',\n    'Nepal',\n    'Nauru',\n    'Niue',\n    'New Zealand (Aotearoa)',\n    'Oman',\n    'Panama',\n    'Peru',\n    'Papua New Guinea',\n    'Philippines',\n    'Pakistan',\n    'Poland',\n    'Saint Pierre and Miquelon',\n    'Serbia and Montenegro',\n    'Pitcairn',\n    'Puerto Rico',\n    'Palestinian Territory',\n    'Portugal',\n    'Palau',\n    'Paraguay',\n    'Qatar',\n    'Reunion',\n    'Romania',\n    'Russian Federation',\n    'Rwanda',\n    'Saudi Arabia',\n    'Samoa',\n    'Saint Helena',\n    'Saint Vincent and the Grenadines',\n    'San Marino',\n    'Sao Tome and Principe',\n    'Senegal',\n    'Seychelles',\n    'Sierra Leone',\n    'Singapore',\n    'Slovakia',\n    'Slovenia',\n    'Solomon Islands',\n    'Somalia',\n    'South Africa',\n    'Spain',\n    'Sudan',\n    'Suriname',\n    'Svalbard and Jan Mayen',\n    'Sweden',\n    'Switzerland',\n    'Syria',\n    'USSR (former)',\n    'Swaziland',\n    'Taiwan',\n    'Tanzania',\n    'Tajikistan',\n    'Thailand',\n    'Timor-Leste',\n    'Togo',\n    'Tokelau',\n    'Tonga',\n    'Trinidad and Tobago',\n    'Tunisia',\n    'Turkey',\n    'Turkmenistan',\n    'Turks and Caicos Islands',\n    'Tuvalu',\n    'Ukraine',\n    'Uganda',\n    'United Arab Emirates',\n    'United Kingdom',\n    'United States',\n    'United States Minor Outlying Islands',\n    'Uruguay',\n    'Uzbekistan',\n    'Vanuatu',\n    'Vatican City State',\n    'Venezuela',\n    'Virgin Islands (British)',\n    'Virgin Islands (U.S.)',\n    'Viet Nam',\n    'Wallis and Futuna',\n    'Western Sahara',\n    'Yemen',\n    'Yugoslavia (former)',\n    'Zambia',\n    'Zaire (former)',\n    'Zimbabwe'\n  ];\n  statusList = ['Positive', 'Dead', 'Recovered'];\n  email: '';\n  //country: '';\n  status: '';\n  isLoadingResults = false;\n  matcher = new MyErrorStateMatcher();\n  data = [];\n\n  constructor(private router: Router, private api: CaseApiService, private formBuilder: FormBuilder) { }\n\n  ngOnInit(): void {\n    // this.api.getCases()\n    // .subscribe((res: any) => {\n    //   this.data = res;\n    //   console.log(this.data);\n    //   this.isLoadingResults = false;\n    // }, err => {\n    //   console.log(err);\n    //   this.isLoadingResults = false;\n    // });\n\n    this.casesForm = this.formBuilder.group({\n      first_name : [null, Validators.required],\n      last_name : [null, Validators.required],\n      age : [null, Validators.required],\n      gender : [null, Validators.required],\n      email : [null, Validators.required],\n      country : [null, Validators.required],\n      status : [null, Validators.required]\n    });\n  }\n\n  onFormSubmit() {\n    this.isLoadingResults = true;\n    this.api.addCase(this.casesForm.value)\n      .subscribe((res: any) => {\n        const id = res._id;\n        this.isLoadingResults = false;\n        this.router.navigate(['/cases-details', id])\n      }, (err: any) => {\n        console.log(err);\n        this.isLoadingResults = false;\n      })\n  }\n\n}\n","<div class=\"example-container mat-elevation-z8\">\n  <h2>Add Case</h2>\n  <div class=\"example-loading-shade\"\n        *ngIf=\"isLoadingResults\">\n    <mat-spinner *ngIf=\"isLoadingResults\"></mat-spinner>\n  </div>\n  <div class=\"button-row\">\n    <a mat-flat-button color=\"primary\" [routerLink]=\"['/cases']\"><mat-icon>list</mat-icon></a>\n  </div>\n  <mat-card class=\"example-card\">\n    <form [formGroup]=\"casesForm\" (ngSubmit)=\"onFormSubmit()\">\n      <mat-form-field class=\"example-full-width\">\n        <mat-label>First Name</mat-label>\n        <input matInput placeholder=\"First Name\" formControlName=\"first_name\"\n                [errorStateMatcher]=\"matcher\">\n        <mat-error>\n          <span *ngIf=\"!casesForm.get('first_name').valid && casesForm.get('first_name').touched\">Please enter a First Name</span>\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field class=\"example-full-width\">\n        <mat-label>Last Name</mat-label>\n        <input matInput placeholder=\"Last Name\" formControlName=\"last_name\"\n                [errorStateMatcher]=\"matcher\">\n        <mat-error>\n          <span *ngIf=\"!casesForm.get('last_name').valid && casesForm.get('last_name').touched\">Please enter a Last Name</span>\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field class=\"example-full-width\">\n        <mat-label>Gender</mat-label>\n        <mat-select formControlName=\"gender\">\n          <mat-option *ngFor=\"let gl of genderList\" [value]=\"gl\">\n            {{gl}}\n          </mat-option>\n        </mat-select>\n        <mat-error>\n          <span *ngIf=\"!casesForm.get('gender').valid && casesForm.get('gender').touched\">Please choose Gender</span>\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field class=\"example-full-width\">\n        <mat-label>Age</mat-label>\n        <input matInput type=\"number\" placeholder=\"Age\" formControlName=\"age\"\n                [errorStateMatcher]=\"matcher\">\n        <mat-error>\n          <span *ngIf=\"!casesForm.get('age').valid && casesForm.get('age').touched\">Please enter Age</span>\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field class=\"example-full-width\">\n        <mat-label>Email</mat-label>\n        <input matInput placeholder=\"Email\" formControlName=\"email\"\n                [errorStateMatcher]=\"matcher\">\n        <mat-error>\n          <span *ngIf=\"!casesForm.get('email').valid && casesForm.get('email').touched\">Please enter Email</span>\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field class=\"example-full-width\">\n        <mat-label>Country</mat-label>\n        <mat-select formControlName=\"country\">\n          <mat-option *ngFor=\"let cl of countryList\" [value]=\"cl\">\n            {{cl}}\n          </mat-option>\n        </mat-select>\n        <mat-error>\n          <span *ngIf=\"!casesForm.get('country').valid && casesForm.get('country').touched\">Please enter Country</span>\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field class=\"example-full-width\">\n        <mat-label>Status</mat-label>\n        <mat-select formControlName=\"status\">\n          <mat-option *ngFor=\"let sl of statusList\" [value]=\"sl\">\n            {{sl}}\n          </mat-option>\n        </mat-select>\n        <mat-error>\n          <span *ngIf=\"!casesForm.get('status').valid && casesForm.get('status').touched\">Please select Status</span>\n        </mat-error>\n      </mat-form-field>\n      <div class=\"button-row\">\n        <button type=\"submit\" [disabled]=\"!casesForm.valid\" mat-flat-button color=\"primary\"><mat-icon>save</mat-icon></button>\n      </div>\n    </form>\n  </mat-card>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { CaseApiService } from '../../services/case-api.service';\nimport { Cases } from '../../cases';\n\n@Component({\n  selector: 'app-cases-details',\n  templateUrl: './cases-details.component.html',\n  styleUrls: ['./cases-details.component.scss']\n})\nexport class CasesDetailsComponent implements OnInit {\n  cases: Cases = { _id: '', first_name: '', last_name: '', gender: '', age: null, email:'', country: '', status: '', updated: null };\n  isLoadingResults = false;\n\n  constructor(private route: ActivatedRoute, private router: Router, private api: CaseApiService) { }\n\n  ngOnInit(): void {\n    this.getCasesDetails(this.route.snapshot.params.id);\n  }\n\n  getCasesDetails(id: string) {\n    this.api.getCase(id)\n      .subscribe((data: any) => {\n        this.cases = data;\n        console.log(this.cases);\n        this.isLoadingResults = false;\n      });\n  }\n\n  deleteCases(id: any) {\n    this.isLoadingResults = true;\n    this.api.deleteCase(id)\n      .subscribe(res => {\n        this.isLoadingResults = false;\n        this.router.navigate(['/cases']);\n      }, (err) => {\n        console.log(err);\n        this.isLoadingResults = false;\n      }\n    );\n  }\n\n}\n","<div class=\"example-container mat-elevation-z8\">\n  <h2>Corona Virus Cases Details</h2>\n  <div class=\"example-loading-shade\" *ngIf=\"isLoadingResults\">\n    <mat-spinner *ngIf=\"isLoadingResults\"></mat-spinner>\n  </div>\n  <div class=\"button-row\">\n    <a mat-flat-button color=\"primary\" [routerLink]=\"['/cases']\"><mat-icon>list</mat-icon></a>\n  </div>\n  <mat-card class=\"example-card\">\n    <mat-card-header>\n      <mat-card-title><h2>{{ cases.first_name }}</h2></mat-card-title>\n      <mat-card-title><h2>{{ cases.last_name }}</h2></mat-card-title>\n      <mat-card-subtitle>{{ cases.age }} years old</mat-card-subtitle>\n    </mat-card-header>\n    <mat-card-content>\n      <dl>\n        <dt>Gender:</dt>\n        <dd>{{ cases.gender }}</dd>\n        <dt>Email:</dt>\n        <dd>{{ cases.email }}</dd>\n        <dt>City:</dt>\n        <dd>{{ cases.country }}</dd>\n        <dt>Status</dt>\n        <dd>{{ cases.status }}</dd>\n      </dl>\n    </mat-card-content>\n    <mat-card-actions>\n      <a mat-flat-button color=\"primary\" [routerLink]=\"['/cases-edit', cases._id]\"><mat-icon>edit</mat-icon>Edit</a>\n      <a mat-flat-button color=\"warn\" (click)=\"deleteCases(cases._id)\"><mat-icon>delete</mat-icon> Delete</a>\n    </mat-card-actions>\n  </mat-card>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { CaseApiService } from '../../services/case-api.service';\nimport { FormControl, FormGroupDirective, FormBuilder, FormGroup, NgForm, Validators } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\n\n/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n\n@Component({\n  selector: 'app-cases-edit',\n  templateUrl: './cases-edit.component.html',\n  styleUrls: ['./cases-edit.component.scss']\n})\nexport class CasesEditComponent implements OnInit {\n  casesForm: FormGroup;\n  _id = '';\n  first_name = '';\n  last_name = '';\n  gender = '';\n  age: number = null;\n  email = '';\n  country = '';\n  status = '';\n  statusList = ['Positive', 'Dead', 'Recovered'];\n  genderList = ['Male', 'Female'];\n  countryList = [\n    'Afghanistan',\n    'Albania',\n    'Algeria',\n    'Aland Islands',\n    'American Samoa',\n    'Anguilla',\n    'Andorra',\n    'Angola',\n    'Antilles - Netherlands ',\n    'Antigua and Barbuda',\n    'Antarctica',\n    'Argentina',\n    'Armenia',\n    'Australia',\n    'Austria',\n    'Aruba',\n    'Azerbaijan',\n    'Bosnia and Herzegovina',\n    'Barbados',\n    'Bangladesh',\n    'Belgium',\n    'Burkina Faso',\n    'Bulgaria',\n    'Bahrain',\n    'Burundi',\n    'Benin',\n    'Bermuda',\n    'Brunei Darussalam',\n    'Bolivia',\n    'Brazil',\n    'Bahamas',\n    'Bhutan',\n    'Bouvet Island',\n    'Botswana',\n    'Belarus',\n    'Belize',\n    'Cambodia',\n    'Cameroon',\n    'Canada',\n    'Cape Verde',\n    'Central African Republic',\n    'Chad',\n    'Chile',\n    'China',\n    'Christmas Island',\n    'Cocos (Keeling) Islands',\n    'Colombia',\n    'Congo',\n    'Cote D\\'Ivoire (Ivory Coast)',\n    'Cook Islands',\n    'Costa Rica',\n    'Croatia (Hrvatska)',\n    'Cuba',\n    'Cyprus',\n    'Czech Republic',\n    'Democratic Republic of the Congo',\n    'Djibouti',\n    'Denmark',\n    'Dominica',\n    'Dominican Republic',\n    'Ecuador',\n    'Egypt',\n    'El Salvador',\n    'East Timor',\n    'Estonia',\n    'Equatorial Guinea',\n    'Eritrea',\n    'Ethiopia',\n    'Finland',\n    'Fiji',\n    'Falkland Islands (Malvinas)',\n    'Federated States of Micronesia',\n    'Faroe Islands',\n    'France',\n    'France, Metropolitan',\n    'French Guiana',\n    'French Polynesia',\n    'Gabon',\n    'Gambia',\n    'Germany',\n    'Ghana',\n    'Gibraltar',\n    'Great Britain (UK)',\n    'Grenada',\n    'Georgia',\n    'Greece',\n    'Greenland',\n    'Guinea',\n    'Guadeloupe',\n    'S. Georgia and S. Sandwich Islands',\n    'Guatemala',\n    'Guam',\n    'Guinea-Bissau',\n    'Guyana',\n    'Hong Kong',\n    'Heard Island and McDonald Islands',\n    'Honduras',\n    'Haiti',\n    'Hungary',\n    'Indonesia',\n    'Ireland',\n    'Israel',\n    'India',\n    'British Indian Ocean Territory',\n    'Iraq',\n    'Iran',\n    'Italy',\n    'Jamaica',\n    'Jordan',\n    'Japan',\n    'Kenya',\n    'Kyrgyzstan',\n    'Kiribati',\n    'Comoros',\n    'Saint Kitts and Nevis',\n    'Korea (North)',\n    'Korea (South)',\n    'Kuwait',\n    'Cayman Islands',\n    'Kazakhstan',\n    'Laos',\n    'Lebanon',\n    'Saint Lucia',\n    'Liechtenstein',\n    'Sri Lanka',\n    'Liberia',\n    'Lesotho',\n    'Lithuania',\n    'Luxembourg',\n    'Latvia',\n    'Libya',\n    'Macedonia',\n    'Macao',\n    'Madagascar',\n    'Malaysia',\n    'Mali',\n    'Malawi',\n    'Mauritania',\n    'Marshall Islands',\n    'Martinique',\n    'Mauritius',\n    'Mayotte',\n    'Malta',\n    'Mexico',\n    'Morocco',\n    'Monaco',\n    'Moldova',\n    'Mongolia',\n    'Myanmar',\n    'Northern Mariana Islands',\n    'Montserrat',\n    'Maldives',\n    'Mozambique',\n    'Namibia',\n    'New Caledonia',\n    'Niger',\n    'Norfolk Island',\n    'Nigeria',\n    'Nicaragua',\n    'Netherlands',\n    'Norway',\n    'Nepal',\n    'Nauru',\n    'Niue',\n    'New Zealand (Aotearoa)',\n    'Oman',\n    'Panama',\n    'Peru',\n    'Papua New Guinea',\n    'Philippines',\n    'Pakistan',\n    'Poland',\n    'Saint Pierre and Miquelon',\n    'Serbia and Montenegro',\n    'Pitcairn',\n    'Puerto Rico',\n    'Palestinian Territory',\n    'Portugal',\n    'Palau',\n    'Paraguay',\n    'Qatar',\n    'Reunion',\n    'Romania',\n    'Russian Federation',\n    'Rwanda',\n    'Saudi Arabia',\n    'Samoa',\n    'Saint Helena',\n    'Saint Vincent and the Grenadines',\n    'San Marino',\n    'Sao Tome and Principe',\n    'Senegal',\n    'Seychelles',\n    'Sierra Leone',\n    'Singapore',\n    'Slovakia',\n    'Slovenia',\n    'Solomon Islands',\n    'Somalia',\n    'South Africa',\n    'Spain',\n    'Sudan',\n    'Suriname',\n    'Svalbard and Jan Mayen',\n    'Sweden',\n    'Switzerland',\n    'Syria',\n    'USSR (former)',\n    'Swaziland',\n    'Taiwan',\n    'Tanzania',\n    'Tajikistan',\n    'Thailand',\n    'Timor-Leste',\n    'Togo',\n    'Tokelau',\n    'Tonga',\n    'Trinidad and Tobago',\n    'Tunisia',\n    'Turkey',\n    'Turkmenistan',\n    'Turks and Caicos Islands',\n    'Tuvalu',\n    'Ukraine',\n    'Uganda',\n    'United Arab Emirates',\n    'United Kingdom',\n    'United States',\n    'United States Minor Outlying Islands',\n    'Uruguay',\n    'Uzbekistan',\n    'Vanuatu',\n    'Vatican City State',\n    'Venezuela',\n    'Virgin Islands (British)',\n    'Virgin Islands (U.S.)',\n    'Viet Nam',\n    'Wallis and Futuna',\n    'Western Sahara',\n    'Yemen',\n    'Yugoslavia (former)',\n    'Zambia',\n    'Zaire (former)',\n    'Zimbabwe'\n  ];\n  isLoadingResults = false;\n  matcher = new MyErrorStateMatcher();\n\n  constructor(private router: Router, private route: ActivatedRoute, private api: CaseApiService, private formBuilder: FormBuilder) { }\n\n  ngOnInit(): void {\n    this.getCaseById(this.route.snapshot.params.id);\n    this.casesForm = this.formBuilder.group({\n      first_name : [null, Validators.required],\n      last_name : [null, Validators.required],\n      gender : [null, Validators.required],\n      age : [null, Validators.required],\n      email : [null, Validators.required],\n      country : [null, Validators.required],\n      status : [null, Validators.required]\n    });\n  }\n\n  getCaseById(id: any) {\n    this.api.getCase(id).subscribe((data: any) => {\n      this._id = data._id;\n      this.casesForm.setValue({\n        first_name: data.first_name,\n        last_name: data.last_name,\n        gender: data.gender,\n        age: data.age,\n        email: data.email,\n        country: data.country,\n        status: data.status\n      });\n    });\n  }\n\n  onFormSubmit() {\n    this.isLoadingResults = true;\n    this.api.updateCase(this._id, this.casesForm.value)\n      .subscribe((res: any) => {\n          const id = res._id;\n          this.isLoadingResults = false;\n          this.router.navigate(['/cases-details', id]);\n        }, (err: any) => {\n          console.log(err);\n          this.isLoadingResults = false;\n        }\n      );\n  }\n\n  casesDetails() {\n    this.router.navigate(['/cases-details', this._id]);\n  }\n\n}\n","<div class=\"example-container mat-elevation-z8\">\n  <h2>Coronavirus Edit Cases</h2>\n  <div class=\"example-loading-shade\"\n        *ngIf=\"isLoadingResults\">\n    <mat-spinner *ngIf=\"isLoadingResults\"></mat-spinner>\n  </div>\n  <div class=\"button-row\">\n      <a mat-flat-button color=\"primary\" (click)=\"casesDetails()\"><mat-icon>info</mat-icon></a>\n  </div>\n  <mat-card class=\"example-card\">\n    <form [formGroup]=\"casesForm\" (ngSubmit)=\"onFormSubmit()\">\n      <mat-form-field class=\"example-full-width\">\n        <mat-label>First Name</mat-label>\n        <input matInput placeholder=\"First Name\" formControlName=\"first_name\"\n                [errorStateMatcher]=\"matcher\">\n        <mat-error>\n          <span *ngIf=\"!casesForm.get('first_name').valid && casesForm.get('first_name').touched\">Please enter First Name</span>\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field class=\"example-full-width\">\n        <mat-label>Last Name</mat-label>\n        <input matInput placeholder=\"Last Name\" formControlName=\"last_name\"\n                [errorStateMatcher]=\"matcher\">\n        <mat-error>\n          <span *ngIf=\"!casesForm.get('last_name').valid && casesForm.get('last_name').touched\">Please enter Last Name</span>\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field class=\"example-full-width\">\n        <mat-label>Gender</mat-label>\n        <mat-select formControlName=\"gender\">\n          <mat-option *ngFor=\"let gl of genderList\" [value]=\"gl\">\n            {{gl}}\n          </mat-option>\n        </mat-select>\n        <mat-error>\n          <span *ngIf=\"!casesForm.get('gender').valid && casesForm.get('gender').touched\">Please choose Gender</span>\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field class=\"example-full-width\">\n        <mat-label>Age</mat-label>\n        <input matInput type=\"number\" placeholder=\"Age\" formControlName=\"age\"\n                [errorStateMatcher]=\"matcher\">\n        <mat-error>\n          <span *ngIf=\"!casesForm.get('age').valid && casesForm.get('age').touched\">Please enter Age</span>\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field class=\"example-full-width\">\n        <mat-label>Email</mat-label>\n        <input matInput placeholder=\"Email\" formControlName=\"email\"\n                [errorStateMatcher]=\"matcher\">\n        <mat-error>\n          <span *ngIf=\"!casesForm.get('email').valid && casesForm.get('email').touched\">Please enter Address</span>\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field class=\"example-full-width\">\n        <mat-label>Country</mat-label>\n        <mat-select formControlName=\"country\">\n          <mat-option *ngFor=\"let cl of countryList\" [value]=\"cl\">\n            {{cl}}\n          </mat-option>\n        </mat-select>\n        <mat-error>\n          <span *ngIf=\"!casesForm.get('status').valid && casesForm.get('status').touched\">Please select Status</span>\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field class=\"example-full-width\">\n        <mat-label>Status</mat-label>\n        <mat-select formControlName=\"status\">\n          <mat-option *ngFor=\"let sl of statusList\" [value]=\"sl\">\n            {{sl}}\n          </mat-option>\n        </mat-select>\n        <mat-error>\n          <span *ngIf=\"!casesForm.get('status').valid && casesForm.get('status').touched\">Please select Status</span>\n        </mat-error>\n      </mat-form-field>\n      <div class=\"button-row\">\n        <button type=\"submit\" [disabled]=\"!casesForm.valid\" mat-flat-button color=\"primary\"><mat-icon>save</mat-icon></button>\n      </div>\n    </form>\n  </mat-card>\n</div>\n\n","import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTable } from '@angular/material/table';\nimport { CasesDataSource, CasesItem } from './cases-datasource';\nimport { CaseApiService } from '../../services/case-api.service';\nimport { Cases } from '../../cases';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\n\n@Component({\n  selector: 'app-cases',\n  templateUrl: './cases.component.html',\n  styleUrls: ['./cases.component.scss']\n})\nexport class CasesComponent implements OnInit {\n  /** Columns displayed in the table. Columns IDs can be added, removed, or reordered. */\n  displayedColumns = ['_id', 'first_name', 'last_name', 'gender', 'age', 'email', 'country', 'status', 'actions'];\n  data: Cases[] = [];\n  isLoadingResults = true;\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  // @ViewChild(MatTable) table: MatTable<CasesItem>;\n  //dataSource: CasesDataSource;\n  @ViewChild(MatTable) table: MatTable<Cases>;\n  //dataSource: CaseApiService;\n  // isLoadingResults = true;\n\n  constructor(private route: ActivatedRoute, private router: Router, private api: CaseApiService,private httpClient:HttpClient) { }\n\n  ngOnInit() {\n    this.api.getCases()\n    .subscribe((res: any) => {\n      this.data = res;\n      console.log(this.data);\n      this.isLoadingResults = false;\n    }, err => {\n      console.log(err);\n      this.isLoadingResults = false;\n    });\n    //this.dataSource = new CasesDataSource();\n    //this.dataSource = new CaseApiService();\n  }\n\n  deleteCases(id: any) {\n    this.isLoadingResults = true;\n    this.api.deleteCase(id)\n      .subscribe(res => {\n        this.isLoadingResults = false;\n        this.router.navigate(['/cases']);\n      }, (err) => {\n        console.log(err);\n        this.isLoadingResults = false;\n      }\n    );\n  }\n\n  ngAfterViewInit() {\n    console.log('paginator')\n  }\n\n  onRowClicked(row) {\n    console.log('Row clicked: ', row);\n  }\n}\n","<div class=\"cases-container mat-elevation-z8\">\n  <!-- <h2>Covid 19 Cases</h2> -->\n  <div class=\"example-loading-shade\" *ngIf=\"isLoadingResults\">\n    <mat-spinner></mat-spinner>\n  </div>\n  <!-- <div class=\"button-row\">\n    <a mat-flat-button color=\"primary\" [routerLink]=\"['/cases-add']\"><mat-icon>add</mat-icon>Cases</a>\n\n    <a mat-flat-button color=\"accent\" [routerLink]=\"['/stats']\"><mat-icon>bar_chart</mat-icon>Stats</a>\n  </div> -->\n  <div class=\"mat-elevation-z8\">\n    <div class=\"button-row\">\n      <a mat-flat-button color=\"primary\" [routerLink]=\"['/cases-add']\"><mat-icon>add</mat-icon>Cases</a>\n\n      <!-- <a mat-flat-button color=\"accent\" [routerLink]=\"['/stats']\"><mat-icon>bar_chart</mat-icon>Stats</a> -->\n    </div>\n    <table mat-table [dataSource]=\"data\" class=\"cases-table-container\" matSort matSortActive=\"first_name\" matSortDisableClear matSortDirection=\"asc\">\n\n      <ng-container matColumnDef=\"_id\" class=\"flex-item\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Id</th>\n        <td mat-cell *matCellDef=\"let row\">{{row._id}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"first_name\" class=\"flex-item\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>First Name</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.first_name}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"last_name\" class=\"flex-item\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Last Name</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.last_name}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"gender\" class=\"flex-item\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Gender</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.gender}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"age\" class=\"flex-item\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Age</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.age}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"email\" class=\"flex-item\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Email</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.email}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"country\" class=\"flex-item\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Country</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.country}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"status\" class=\"flex-item\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Status</th>\n        <td mat-cell *matCellDef=\"let row\">{{row.status}}</td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"actions\" class=\"flex-item\">\n        <th mat-header-cell *matHeaderCellDef></th>\n        <td mat-cell *matCellDef=\"let row\">\n          <button mat-icon-button matTooltip=\"Click to Edit\" class=\"iconbutton\" color=\"primary\" [routerLink]=\"['/cases-edit', row._id]\">\n              <mat-icon aria-label=\"Edit\">edit</mat-icon>\n          </button>\n          <!-- <button mat-icon-button matTooltip=\"Click to Delete\" class=\"iconbutton\" color=\"warn\">\n              <mat-icon aria-label=\"Delete\">delete</mat-icon>\n          </button> -->\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" (click)=\"onRowClicked(row)\"></tr>\n    </table>\n    <mat-paginator #paginator\n      [length]=\"data.length\"\n      [pageIndex]=\"0\"\n      [pageSize]=\"50\"\n      [pageSizeOptions]=\"[25, 50, 100, 250]\">\n  </mat-paginator>\n  </div>\n</div>\n","import { Component } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent {\n  /** Based on the screen size, switch from standard to one column per row */\n  cards = this.breakpointObserver.observe(Breakpoints.Handset).pipe(\n    map(({ matches }) => {\n      if (matches) {\n        return [\n          { title: 'Card 1', cols: 1, rows: 1 },\n          { title: 'Card 2', cols: 1, rows: 1 },\n          { title: 'Card 3', cols: 1, rows: 1 },\n          { title: 'Card 4', cols: 1, rows: 1 }\n        ];\n      }\n\n      return [\n        { title: 'Card 1', cols: 2, rows: 1 },\n        { title: 'Card 2', cols: 1, rows: 1 },\n        { title: 'Card 3', cols: 1, rows: 2 },\n        { title: 'Card 4', cols: 1, rows: 1 }\n      ];\n    })\n  );\n\n  constructor(private breakpointObserver: BreakpointObserver) {}\n}\n","<div class=\"grid-container\">\n  <!-- <h1 class=\"mat-h1\">Dashboard</h1> -->\n  <mat-grid-list cols=\"2\" rowHeight=\"350px\">\n    <mat-grid-tile *ngFor=\"let card of cards | async\" [colspan]=\"card.cols\" [rowspan]=\"card.rows\">\n      <mat-card class=\"dashboard-card\">\n        <mat-card-header>\n          <mat-card-title>\n            {{card.title}}\n            <button mat-icon-button class=\"more-button\" [matMenuTriggerFor]=\"menu\" aria-label=\"Toggle menu\">\n              <mat-icon>more_vert</mat-icon>\n            </button>\n            <mat-menu #menu=\"matMenu\" xPosition=\"before\">\n              <button mat-menu-item>Expand</button>\n              <button mat-menu-item>Remove</button>\n            </mat-menu>\n          </mat-card-title>\n        </mat-card-header>\n        <mat-card-content class=\"dashboard-card-content\">\n          <div>Card Content Here</div>\n        </mat-card-content>\n      </mat-card>\n    </mat-grid-tile>\n  </mat-grid-list>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { FlashMessagesService } from 'angular2-flash-messages';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  hide:boolean = true;\n  addressForm = this.fb.group({\n    username: [null, Validators.required],\n    password: [null, Validators.required]\n  })\n\n  constructor(private fb: FormBuilder, private router: Router, private flashMessageService: FlashMessagesService, public matSnackBar: MatSnackBar, private authService: AuthService) {}\n\n  ngOnInit(): void {\n\n  }\n\n  onLoginSubmit() {\n    //console.log(this.addressForm.value.password);\n    const user = {\n      username: this.addressForm.value.username,\n      password: this.addressForm.value.password\n    }\n\n    // Login User\n    this.authService.authenticateUser(user).subscribe(data => {\n      if(data.success) {\n        this.authService.storeUserData(data.token, data.user);\n        // Provide some type of success message for good UX\n        console.log('success')\n        this.router.navigate(['dashboard']).then(() => {\n          this.matSnackBar.open('You are logged in.','OK', {\n            duration: 3000,\n          })\n        })\n      } else {\n        // Provide some type of error message for good UX\n        this.matSnackBar.open('There was a problem with your login.','OK', {\n          duration: 3000,\n        })\n        console.log('error')\n        //this.router.navigate(['login']);\n      }\n    });\n  }\n}\n","<div class=\"login-container\">\n  <form [formGroup]=\"addressForm\" novalidate (ngSubmit)=\"onLoginSubmit()\">\n    <mat-card class=\"shipping-card\">\n      <mat-card-header>\n        <mat-card-title style=\"margin-left: -15px;\">Coronavirus Patient Tracker System</mat-card-title>\n        <mat-card-subtitle style=\"margin-left: -15px;\">Sign In</mat-card-subtitle>\n      </mat-card-header>\n      <mat-card-content>\n        <!-- <div class=\"row\">\n          <div class=\"col\">\n            <mat-form-field class=\"full-width\">\n              <input matInput placeholder=\"Company\" formControlName=\"company\">\n            </mat-form-field>\n          </div>\n        </div> -->\n        <div class=\"row\">\n          <div class=\"col\">\n            <mat-form-field class=\"full-width\" appearance=\"fill\">\n              <input matInput placeholder=\"Username\" formControlName=\"username\" [(ngModel)]=\"addressForm.value.username\">\n              <mat-error *ngIf=\"addressForm.controls['username'].hasError('required')\">\n                A username is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n          </div>\n          <div class=\"col\">\n            <mat-form-field class=\"full-width\" appearance=\"fill\">\n              <input matInput [type]=\"hide ? 'password' : 'text'\" placeholder=\"Password\" formControlName=\"password\" [(ngModel)]=\"addressForm.value.password\">\n              <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\">\n                <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n                </button>\n              <mat-error *ngIf=\"addressForm.controls['password'].hasError('required')\">\n                Your password is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n          </div>\n        </div>\n      </mat-card-content>\n      <mat-card-actions>\n        <button mat-raised-button color=\"primary\" type=\"submit\">Sign In</button>\n        <p class=\"loginCredentials\"><b>Username</b>: admin&nbsp;&nbsp;<b>Password</b>: admin</p>\n      </mat-card-actions>\n      <mat-divider></mat-divider>\n      <mat-card-content>\n        <p class=\"signup\" mat-line>Don't have an Account? <a [routerLink]=\"['/register']\" href=\"#\">Sign Up</a></p>\n      </mat-card-content>\n    </mat-card>\n  </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { AuthService } from '../../services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss']\n})\nexport class NavbarComponent implements OnInit {\n  user: any;\n\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches),\n      shareReplay()\n    );\n\n  constructor(private breakpointObserver: BreakpointObserver, public authService: AuthService, private router: Router,) {}\n\n  ngOnInit(): void{\n    this.authService.getProfile().subscribe(profile => {\n      this.user = profile.user;\n    },\n    err => {\n      console.log(err);\n      return false;\n    })\n  }\n\n  onLogoutClick() {\n    this.authService.logout();\n    this.router.navigate(['/login']);\n    return false;\n  }\n\n}\n","<mat-sidenav-container class=\"sidenav-container\">\n  <mat-sidenav #drawer class=\"sidenav\" fixedInViewport\n      [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\n      [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\n      [opened]=\"(isHandset$ | async) === false\">\n    <mat-toolbar *ngIf=\"user\">Hello, {{ user.name }}!</mat-toolbar>\n    <mat-nav-list>\n      <!-- <a mat-list-item [routerLink]=\"['/']\">Home</a> -->\n      <a mat-list-item *ngIf=\"authService.loggedIn()\" [routerLink]=\"['/dashboard']\">Dashboard</a>\n      <a mat-list-item *ngIf=\"authService.loggedIn()\" [routerLink]=\"['/profile']\">Profile</a>\n      <a mat-list-item *ngIf=\"authService.loggedIn()\" [routerLink]=\"['/cases']\">Cases</a>\n      <!-- <a mat-list-item *ngIf=\"authService.loggedIn()\" [routerLink]=\"['/cases-add']\">Cases-Add</a>\n      <a mat-list-item *ngIf=\"authService.loggedIn()\" [routerLink]=\"['/cases-edit']\">Cases Edit</a>\n      <a mat-list-item *ngIf=\"authService.loggedIn()\" [routerLink]=\"['/cases-details']\">Cases Details</a> -->\n      <a mat-list-item *ngIf=\"!authService.loggedIn()\" [routerLink]=\"['/login']\">Login</a>\n      <a mat-list-item *ngIf=\"!authService.loggedIn()\" [routerLink]=\"['/register']\">Register</a>\n      <a mat-list-item *ngIf=\"authService.loggedIn()\" (click)=\"onLogoutClick()\" href=\"#\">Logout</a>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <mat-toolbar color=\"primary\">\n      <button\n        type=\"button\"\n        aria-label=\"Toggle sidenav\"\n        mat-icon-button\n        (click)=\"drawer.toggle()\"\n        *ngIf=\"isHandset$ | async\">\n        <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\n      </button>\n      <span class=\"title\">Coronavirus Tracker</span>\n    </mat-toolbar>\n    <!-- Add Content Here -->\n    <router-outlet></router-outlet>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss']\n})\nexport class ProfileComponent implements OnInit {\n  user: any;\n\n  constructor(private authService: AuthService, private router: Router) {}\n\n  ngOnInit() {\n    //console.log('ngOnInit works')\n    this.authService.getProfile().subscribe(profile => {\n      this.user = profile.user;\n    },\n    err => {\n      console.log(err);\n      return false;\n    })\n  }\n}\n","<!-- <div class=\"profile-container\">\n  <mat-list *ngIf=\"user\">\n    <h2> {{ user.name }} </h2>\n    <mat-divider></mat-divider>\n    <mat-list-item> Username: {{ user.username }} </mat-list-item>\n    <mat-divider></mat-divider>\n    <mat-list-item> Email: {{ user.email }} </mat-list-item>\n   </mat-list>\n</div> -->\n<div class=\"covid-card\">\n  <mat-card class=\"example-card\" *ngIf=\"user\">\n    <mat-card-header>\n      <div mat-card-avatar class=\"example-header-image\"></div>\n      <mat-card-title>{{ user.name }}</mat-card-title>\n      <mat-card-subtitle>Title: System Admin</mat-card-subtitle>\n    </mat-card-header>\n    <!-- <img mat-card-image src=\"https://material.angular.io/assets/img/examples/shiba2.jpg\" alt=\"Photo of a Shiba Inu\"> -->\n    <mat-card-content>\n      <p>\n        Username: {{ user.username }}\n      </p>\n      <p>\n        Email: {{ user.email }}\n      </p>\n    </mat-card-content>\n  </mat-card>\n</div>\n","import { Component, OnInit} from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { AuthService } from '../../services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n  addressForm = this.fb.group({\n    name: [null, Validators.required],\n    username: [null, Validators.required],\n    email: [null, Validators.required],\n    password: [null, Validators.required]\n  });\n\n  constructor(private fb: FormBuilder, private authService: AuthService, private router: Router) {}\n\n  ngOnInit(): void {}\n\n  onRegisterSubmit() {\n    const user = {\n      name: this.addressForm.value.name,\n      username: this.addressForm.value.username,\n      email: this.addressForm.value.email,\n      password: this.addressForm.value.password\n    }\n\n    //Register User\n    this.authService.registerUser(user).subscribe(data => {\n      if(data.success) {\n        // Provide some type of success message for good UX\n        console.log('success')\n        this.router.navigate(['/login']);\n      } else {\n        // Provide some type of error message for good UX\n        console.log('error')\n        this.router.navigate(['/register']);\n      }\n    });\n    //console.log(user.name, user.email, user.username, user.password);\n  }\n}\n","<div class=\"register-container\">\n  <form [formGroup]=\"addressForm\" novalidate (ngSubmit)=\"onRegisterSubmit()\">\n    <mat-card class=\"shipping-card\">\n      <mat-card-header>\n        <mat-card-title>User Registration</mat-card-title>\n      </mat-card-header>\n      <mat-card-content>\n        <div class=\"row\">\n          <div class=\"col\">\n            <mat-form-field class=\"full-width\">\n              <input matInput placeholder=\"Name\" formControlName=\"name\">\n            </mat-form-field>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col\">\n            <mat-form-field class=\"full-width\">\n              <input matInput placeholder=\"Username\" formControlName=\"username\">\n              <mat-error *ngIf=\"addressForm.controls['username'].hasError('required')\">\n                Username is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n          </div>\n          <div class=\"col\">\n            <mat-form-field class=\"full-width\">\n              <input matInput placeholder=\"Email\" formControlName=\"email\">\n              <mat-error *ngIf=\"addressForm.controls['email'].hasError('required')\">\n                Email is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col\">\n            <mat-form-field class=\"full-width\">\n              <input matInput placeholder=\"Password\" formControlName=\"password\">\n              <mat-error *ngIf=\"addressForm.controls['password'].hasError('required')\">\n                Password is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n          </div>\n        </div>\n\n\n        <!-- <div class=\"row\">\n          <div class=\"col\">\n            <mat-form-field class=\"full-width\">\n              <input matInput placeholder=\"City\" formControlName=\"city\">\n              <mat-error *ngIf=\"addressForm.controls['city'].hasError('required')\">\n                City is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n          </div>\n          <div class=\"col\">\n            <mat-form-field class=\"full-width\">\n              <mat-select placeholder=\"State\" formControlName=\"state\">\n                <mat-option *ngFor=\"let state of states\" [value]=\"state.abbreviation\">\n                  {{ state.name }}\n                </mat-option>\n              </mat-select>\n              <mat-error *ngIf=\"addressForm.controls['state'].hasError('required')\">\n                State is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n          </div>\n        </div> -->\n      </mat-card-content>\n      <mat-card-actions>\n        <button mat-raised-button color=\"primary\" type=\"submit\">Submit</button>\n      </mat-card-actions>\n    </mat-card>\n  </form>\n</div>\n","import { Injectable } from '@angular/core';\nimport { Router, CanActivate } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(public authService: AuthService, private router: Router){}\n\n  canActivate() {\n    if(this.authService.loggedIn()) {\n      return true;\n    } else {\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  authToken: any;\n  user: any;\n\n  constructor(private http: HttpClient, public jwtHelper: JwtHelperService) { }\n\n  registerUser(user): Observable<any> {\n    let httpOptions = { headers: new HttpHeaders({ 'Content-Type': 'application/json' }) };\n    // return this.http.post<any>('http://localhost:3200/users/register', user, httpOptions);\n    return this.http.post<any>('users/register', user, httpOptions);\n  }\n\n  authenticateUser(user): Observable<any> {\n    let httpOptions = { headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    }) };\n    // return this.http.post<any>('http://localhost:3200/users/authenticate', user, httpOptions);\n    return this.http.post<any>('users/authenticate', user, httpOptions);\n  }\n\n  getProfile(): Observable<any> {\n    this.loadToken();\n    let httpOptions = { headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': this.authToken\n    }) };\n    // return this.http.get<any>('http://localhost:3200/users/profile', httpOptions);\n    return this.http.get<any>('users/profile', httpOptions);\n  }\n\n  storeUserData(token, user) {\n    localStorage.setItem('id_token', token);\n    localStorage.setItem('user', JSON.stringify(user));\n    this.authToken = token;\n    this.user = user;\n  }\n\n  loadToken() {\n    const token = localStorage.getItem('id_token');\n    this.authToken = token;\n  }\n\n  loggedIn(){\n    const token: any = localStorage.getItem('id_token');\n    if(token == null || token == undefined) {\n      this.jwtHelper.isTokenExpired()\n      return false;\n    } else {\n      !this.jwtHelper.isTokenExpired()\n      return true;\n    }\n\n    // if(this.authToken != null){return true;}\n    // else{return false;}\n\n    //   if (localStorage.id_token == undefined ){\n    //    console.log('Hello');\n    //    return false\n    //   } else {\n    //   console.log('Goodbye');\n    // const helper = new JwtHelperService();\n    // console.log(helper.isTokenExpired(localStorage.id_token));\n    //   return helper.isTokenExpired(localStorage.id_token); // other people are putting 'id_token'' here but it didn't work for me so i just put the localStorage item\n    //   }\n   }\n\n  logout() {\n    this.authToken = null;\n    this.user = null;\n    localStorage.clear();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError, from } from 'rxjs';\nimport { HttpClient, HttpHeaders, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { catchError, tap, map } from 'rxjs/operators';\nimport { Cases } from '../cases';\n\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\n\n// const apiUrl = 'http://localhost:3200/cases'\nconst apiUrl = 'cases'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CaseApiService {\n  data: Cases[] = [];\n\n  constructor(private httpClient:HttpClient) { }\n\n  // Error Handling\n  private handleError<T> (operation = 'operation', result?:T) {\n    return (error:any): Observable<T> => {\n      console.log(error);\n      return of(result as T);\n    }\n  }\n\n  // Get All Cases\n  // getCases(_id:string, filter = '', sortOrder = 'asc', pageNumber = 0, pageSize = 3): Observable<Cases[]> {\n  //   return this.httpClient.get<Cases[]>(`${apiUrl}`, {\n  //     params: new HttpParams()\n  //       .set('_id', _id.toString())\n  //       .set('filter', filter)\n  //       .set('sortOrder', sortOrder)\n  //       .set('pageNumber', pageNumber.toString())\n  //       .set('pageSize', pageSize.toString())\n  //   }).pipe(\n  //     map(res => res['payload'])\n  //   );\n  // }\n\n  getCases(): Observable<Cases[]> {\n    return this.httpClient.get<Cases[]>(`${apiUrl}`)\n      .pipe(\n        tap(cases => console.log('fetched cases')),\n        catchError(this.handleError('getCases', []))\n      )\n  }\n\n  // Get a Single Case\n  getCase(id): Observable<Cases> {\n    const url = `${apiUrl}/${id}`;\n    return this.httpClient.get<Cases>(url);\n  }\n\n  // Add a Case\n  addCase(cases: Cases): Observable<Cases> {\n    return this.httpClient.post<Cases>(`${apiUrl}`, cases, httpOptions);\n  }\n\n  // Update a Case\n  updateCase(id: string,cases: Cases): Observable<any> {\n    const url = `${apiUrl}/${id}`\n    return this.httpClient.put<Cases>(url, cases, httpOptions)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  // Delete a Case\n  deleteCase(id: string): Observable<{}> {\n    const url = `${apiUrl}/${id}`;\n    return this.httpClient.delete<Cases>(url,httpOptions)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidateService {\n\n  constructor() { }\n\n  validateRegister(user) {\n    if(user.name == undefined || user.email == undefined) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  validateEmail(email) {\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatListModule } from '@angular/material/list';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    MatButtonModule,\n    MatIconModule,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatListModule,\n    MatSnackBarModule,\n    MatInputModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatCardModule,\n    MatGridListModule,\n    MatMenuModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatProgressSpinnerModule\n  ],\n  exports: [\n    MatButtonModule,\n    MatCheckboxModule,\n    MatIconModule,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatListModule,\n    MatSnackBarModule,\n    MatInputModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatCardModule,\n    MatGridListModule,\n    MatMenuModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatProgressSpinnerModule\n  ]\n})\nexport class MaterialModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}